#!/usr/bin/env ruby
require 'pry'
require 'kramdown'

class Hyde
  attr_reader :action, :path, :title

  def initialize
    @action = ARGV[0]
    @path   = ARGV[1]
    @title  = ARGV[2..-1]
  end

  def clone(source, destination)
    FileUtils.cp_r(source, destination)
  end

  def check_path(path)
    Dir.exist?(path)
  end

  def parse_submission
    case action
    when 'new'
      build_new
    when 'build'
      build_output
    when 'post'
      build_post
    end
  end

  def build_new
    raise ArgumentError if check_path(path)
    clone('bin/template/.', path)
    orig_welcome, timestamped_welcome = parse_build_path
    File.rename(orig_welcome, timestamped_welcome)
  end

  def parse_build_path
    file_path           = path + '/source/posts/'
    orig_welcome        = file_path + 'welcome.markdown'
    timestamped_welcome = file_path + Time.new.to_s.split[0] + '-welcome-to-hyde.markdown'
    [orig_welcome, timestamped_welcome]
  end

  def build_output
    FileUtils.cp_r(path + '/source/.', path + '/_output')
    Dir.glob(path + '/_output' + '/**/*.markdown') do |md_file|
      markdown_to_html(md_file)
    end
  end

  def markdown_to_html(file_path)
    markdown = File.read(file_path)
    html = Kramdown::Document.new(markdown).to_html
    File.open(file_path, 'w') { |file| file.write(html) }
    File.rename(file_path, file_path.split('.')[0] + '.html')
  end

  def build_post
    raise ArgumentError if title.nil?
    post_directory = path + '/source/posts/'
    timestamped_welcome = post_directory + Time.new.to_s.split[0] + '-' + title.join('-').downcase + '.markdown'
    contents = "\##{title.join(" ")}\n\nYour content here"
    File.open(timestamped_welcome, 'w') { |file| file.write(contents) }
    puts "Created a new post file at #{timestamped_welcome}"
  end

end


if __FILE__ == $0

  Hyde.new.parse_submission

end
